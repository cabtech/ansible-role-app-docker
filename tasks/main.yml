---
# --------------------------------

- name: 'Added some directories under /usr/local'
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  loop: ['/usr/local/bin', '/usr/local/etc', '/usr/local/etc/bash.d']
  become: true
  tags: ['ct-docker', 'ct-docker-scripts']

- name: 'Copy bash include file over'
  ansible.builtin.copy:
    src: docker.sh
    dest: /usr/local/etc/bash.d
    owner: root
    group: root
    mode: 0644
  become: true
  tags: ['ct-docker', 'ct-docker-scripts']

- name: 'Copy convenience scripts over'
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: /usr/local/bin
    owner: root
    group: root
    mode: '0755'
  loop:
  - dbuild.sh
  - drac.sh
  - drdi.sh
  - drun.sh
  become: true
  tags: ['ct-docker', 'ct-docker-scripts']

- name: "Include {{ ct_family }} tasks"
  include_tasks: setup-{{ ct_family }}.yml
  when:
  - ct_family == "debian" or ct_family == "redhat"
  tags: ['ct-docker']

- name: 'Create Docker config dir (AWS only)'
  ansible.builtin.file:
    path: /root/.docker
    group: root
    mode: '0700'
    owner: root
    state: directory
  when: (ct_cloud|default('earth')) == 'aws'
  become: true
  tags: ['ct-docker']

- name: 'Install Docker config to use ECR helper (AWS only)'
  ansible.builtin.copy:
    dest: /root/.docker/config.json
    group: root
    mode: '0600'
    owner: root
    src: files/config.json
  when: (ct_cloud|default('earth')) == 'aws'
  become: true
  tags: ['ct-docker']

- name: 'Add users to docker role (IECM)'
  ansible.builtin.user:
    name: '{{ item }}'
    append: true
    groups: 'docker'
  loop: '{{ docker_users }}'
  ignore_errors: '{{ ansible_check_mode }}'
  become: true
  tags: ['ct-docker']

- name: 'Render logrotate config'
  ansible.builtin.template:
    src: logrotate.j2
    dest: /etc/logrotate.d/{{ item.filename }}
    owner: root
    group: root
    mode: '0644'
  vars:
    lr_count: '{{ item.count }}'
    lr_path: '{{ item.path }}'
    lr_size: '{{ item.size }}'
  loop: '{{ docker_logrotation }}'
  become: true
  tags: ['ct-docker']

- name: 'Start and enable docker service'
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started
  ignore_errors: '{{ ansible_check_mode }}'
  become: true
  tags: ['ct-docker']

# --------------------------------
# DEPRECATED Docker Swarm set up

- name: 'Get local IP (assumes AWS host)'
  ansible.builtin.command: curl http://169.254.169.254/latest/meta-data/local-ipv4
  when:
  - docker_swarm_mode == 'master'
  - (ct_cloud|default('foo')) == 'aws'
  register: reg_ip
  check_mode: false
  become: true
  tags: ['ct-docker', 'ct-docker-swarm', 'DEPRECATED']

- name: 'Generate docker swarm key'
  ansible.builtin.shell: docker swarm init  --advertise-addr {{ reg_ip.stdout_lines[0] }} | grep 'docker swarm join ' > {{ docker_swarm_tmpfile }}
  args:
    creates: '{{ docker_swarm_tmpfile }}'
  when: docker_swarm_mode == 'master'
  become: true
  tags: ['ct-docker', 'ct-docker-swarm', 'DEPRECATED']

- name: 'Fetch swarm file'
  ansible.builtin.fetch:
    src: '{{ docker_swarm_tmpfile }}'
    dest: /tmp/
    flat: true
  when: docker_swarm_mode == 'master'
  tags: ['ct-docker', 'ct-docker-swarm', 'DEPRECATED']

- name: 'Load docker swarm command'
  ansible.builtin.command: cat {{ docker_swarm_tmpfile }}
  when: docker_swarm_mode == 'minion'
  register: reg_join_command
  changed_when: false
  delegate_to: localhost
  tags: ['ct-docker', 'ct-docker-swarm', 'DEPRECATED']

- name: 'Tell minion to join swarm'
  ansible.builtin.shell: '{{ reg_join_command.stdout_lines[0] }}'
  when: docker_swarm_mode == 'minion'
  register: reg_join
  failed_when: (reg_join.rc|int > 0) and ('This node is already part of a swarm' not in reg_join.stderr)
  become: true
  ignore_errors: '{{ ansible_check_mode }}'
  # changed_when: TODO
  tags: ['ct-docker', 'ct-docker-swarm', 'DEPRECATED']

# --------------------------------
...
